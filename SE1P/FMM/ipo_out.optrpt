
    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1] FMM_expint.c(153,12)
  -> INLINE: (196,21) gettime(void)
  -> INLINE: (229,19) _mm_mxMalloc(size_t, size_t)
  -> (278,5) Intlist(int *, int *)
  -> INLINE: (328,9) Assign(double *, double *, int, int, int *, int *, int *)
  -> (330,2) Mpoles(double *, double *, double *, double *, double *, int *, int *, int, int, int, int, int)
  -> INLINE: (339,5) Direct(double *, double *, double *, double *, double *, int *, int *, int, int, int)
  -> INLINE: (356,19) gettime(void)
  -> INLINE: (384,34) expint_log_euler(double)
    -> INLINE: expint.h:(101,12) expint(double)
      -> INLINE: (29,11) polyval(double *, double)
  -> INLINE: (405,5) _mm_mxFree(double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(187,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 189 and  line 190
LOOP END

LOOP BEGIN at FMM_expint.c(234,5)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at FMM_expint.c(242,5)
<Peeled>
LOOP END

LOOP BEGIN at FMM_expint.c(242,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(242,5)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(242,5)
<Remainder>
LOOP END

LOOP BEGIN at FMM_expint.c(245,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 247 and  line 247

   LOOP BEGIN at FMM_expint.c(246,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between  line 247 and  line 247
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at FMM_expint.c(246,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(249,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FMM_expint.c(250,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at FMM_expint.c(250,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FMM_expint.c(250,9)
   <Remainder>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FMM_expint.c(250,9)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(289,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at FMM_expint.c(323,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FMM_expint.c(1079,5) inlined into FMM_expint.c(328,9)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FMM_expint.c(1079,5) inlined into FMM_expint.c(328,9)
      <Peeled>
      LOOP END

      LOOP BEGIN at FMM_expint.c(1079,5) inlined into FMM_expint.c(328,9)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at FMM_expint.c(1079,5) inlined into FMM_expint.c(328,9)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at FMM_expint.c(1084,5) inlined into FMM_expint.c(328,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between  line 1092 and  line 1092
   LOOP END

   LOOP BEGIN at FMM_expint.c(1100,5) inlined into FMM_expint.c(328,9)
   <Peeled>
   LOOP END

   LOOP BEGIN at FMM_expint.c(1100,5) inlined into FMM_expint.c(328,9)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FMM_expint.c(1100,5) inlined into FMM_expint.c(328,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at FMM_expint.c(1109,5) inlined into FMM_expint.c(328,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between  line 1110 and  line 1111
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at FMM_expint.c(1109,5) inlined into FMM_expint.c(328,9)
   <Remainder>
   LOOP END

   LOOP BEGIN at FMM_expint.c(1115,5) inlined into FMM_expint.c(328,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between  line 1116 and  line 1116
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(924,5) inlined into FMM_expint.c(339,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 925 and  line 936
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(942,2) inlined into FMM_expint.c(339,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(342,5)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at FMM_expint.c(365,5)
<Peeled>
LOOP END

LOOP BEGIN at FMM_expint.c(365,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(365,5)
<Remainder>
LOOP END

LOOP BEGIN at FMM_expint.c(374,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at FMM_expint.c(377,5)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at expint.h(38,7) inlined into FMM_expint.c(384,34)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END

      LOOP BEGIN at expint.h(55,7) inlined into FMM_expint.c(384,34)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END

      LOOP BEGIN at expint.h(13,3) inlined into FMM_expint.c(384,34)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between  line 15 and  line 15
         remark #25436: completely unrolled by 8  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(389,5)
<Peeled>
LOOP END

LOOP BEGIN at FMM_expint.c(389,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(389,5)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(389,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

FMM_expint.c(235,7):remark #34026: call to memset implemented as a call to optimized library version
FMM_expint.c(915,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
FMM_expint.c(916,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
expint.h(25,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
FMM_expint.c(1080,9):remark #34026: call to memset implemented as a call to optimized library version
===========================================================================

Begin optimization report for: Mpoles(double *, double *, double *, double *, double *, int *, int *, int, int, int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Mpoles(double *, double *, double *, double *, double *, int *, int *, int, int, int, int, int)) [2] FMM_expint.c(425,30)
  -> INLINE: (459,22) _mm_mxMalloc(size_t, size_t)
  -> INLINE: (520,5) _mm_mxFree(double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(447,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 449 and  line 448
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FMM_expint.c(447,5)
<Remainder>
LOOP END

LOOP BEGIN at FMM_expint.c(453,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 454 and  line 454
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at FMM_expint.c(453,5)
<Remainder>
LOOP END

LOOP BEGIN at FMM_expint.c(464,5)
<Peeled>
LOOP END

LOOP BEGIN at FMM_expint.c(464,5)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at FMM_expint.c(464,5)
<Remainder>
LOOP END

LOOP BEGIN at FMM_expint.c(468,5)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FMM_expint.c(468,5)
   <Peeled>
   LOOP END

   LOOP BEGIN at FMM_expint.c(468,5)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at FMM_expint.c(468,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(481,5)
   remark #25229: Loop multiversioned for Trip-count
   remark #15319: loop was not vectorized: novector directive used
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(481,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 482 and  line 495
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(506,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(512,5)
   remark #15527: loop was not vectorized: function call to pthread_create(pthread_t *__restrict__, const pthread_attr_t *__restrict__, void *(*)(void *), void *__restrict__) cannot be vectorized   [ FMM_expint.c(513,7) ]
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at FMM_expint.c(516,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #25436: completely unrolled by 8  
LOOP END

    Report from: Code generation optimizations [cg]

FMM_expint.c(469,9):remark #34026: call to memset implemented as a call to optimized library version
===========================================================================

Begin optimization report for: Intlist(int *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Intlist(int *, int *)) [3] mex_FMM.h(112,41)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mex_FMM.h(114,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 115 and  line 122
   remark #25436: completely unrolled by 4  
LOOP END
===========================================================================

Begin optimization report for: DirectWorker(void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DirectWorker(void *)) [4] FMM_expint.c(956,48)
  -> INLINE: (1016,54) expint_log_euler(double)
    -> INLINE: expint.h:(101,12) expint(double)
      -> INLINE: (29,11) polyval(double *, double)
  -> INLINE: (1048,63) expint_log_euler(double)
    -> INLINE: expint.h:(101,12) expint(double)
      -> INLINE: (29,11) polyval(double *, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(983,22)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at FMM_expint.c(995,9)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at FMM_expint.c(1009,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at FMM_expint.c(1011,13)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at expint.h(38,7) inlined into FMM_expint.c(1016,54)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at expint.h(55,7) inlined into FMM_expint.c(1016,54)
            remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
            remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
         LOOP END

         LOOP BEGIN at expint.h(13,3) inlined into FMM_expint.c(1016,54)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between  line 15 and  line 15
            remark #25436: completely unrolled by 8  
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at FMM_expint.c(1022,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at FMM_expint.c(1037,21)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at FMM_expint.c(1044,25)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at expint.h(38,7) inlined into FMM_expint.c(1048,63)
               remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
               remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            LOOP END

            LOOP BEGIN at expint.h(55,7) inlined into FMM_expint.c(1048,63)
               remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
               remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            LOOP END

            LOOP BEGIN at expint.h(13,3) inlined into FMM_expint.c(1048,63)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between  line 15 and  line 15
               remark #25436: completely unrolled by 8  
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

expint.h(25,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
expint.h(25,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
===========================================================================

Begin optimization report for: MpolesWorkerSum(void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MpolesWorkerSum(void *)) [5] FMM_expint.c(802,50)
  -> INLINE: (834,22) _mm_mxMalloc(size_t, size_t)
  -> INLINE: (835,22) _mm_mxMalloc(size_t, size_t)
  -> INLINE: (894,5) _mm_mxFree(double *)
  -> INLINE: (895,5) _mm_mxFree(double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(835,22)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form

   LOOP BEGIN at FMM_expint.c(871,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between  line 874 and  line 890

      LOOP BEGIN at FMM_expint.c(879,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between  line 880 and  line 880
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at FMM_expint.c(879,4)
      <Remainder>
      LOOP END

      LOOP BEGIN at FMM_expint.c(887,4)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between  line 890 and  line 890

         LOOP BEGIN at FMM_expint.c(888,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between  line 890 and  line 890
            remark #25439: unrolled with remainder by 4  
         LOOP END

         LOOP BEGIN at FMM_expint.c(888,6)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MpolesWorker(void *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MpolesWorker(void *)) [6] FMM_expint.c(534,47)
  -> INLINE: (588,23) _mm_mxMalloc(size_t, size_t)
  -> INLINE: (591,22) _mm_mxMalloc(size_t, size_t)
  -> INLINE: (592,22) _mm_mxMalloc(size_t, size_t)
  -> (695,7) compute_mpole_c(double *, int, double, double)
  -> INLINE: (739,67) expint_log_euler(double)
    -> INLINE: expint.h:(101,12) expint(double)
      -> INLINE: (29,11) polyval(double *, double)
  -> (763,6) compute_mpole_c(double *, int, double, double)
  -> INLINE: (793,6) _mm_mxFree(double *)
  -> INLINE: (794,6) _mm_mxFree(double *)
  -> INLINE: (794,25) _mm_mxFree(double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(734,49)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at FMM_expint.c(604,9)
      remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at FMM_expint.c(623,9)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FMM_expint.c(623,9)
      <Peeled>
      LOOP END

      LOOP BEGIN at FMM_expint.c(623,9)
         remark #15300: LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at FMM_expint.c(623,9)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at FMM_expint.c(629,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between  line 639 and  line 652

      LOOP BEGIN at FMM_expint.c(640,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between  line 641 and  line 641
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at FMM_expint.c(640,13)
      <Remainder>
      LOOP END

      LOOP BEGIN at FMM_expint.c(647,6)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed OUTPUT dependence between  line 652 and  line 652

         LOOP BEGIN at FMM_expint.c(648,8)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed FLOW dependence between  line 652 and  line 652
            remark #25439: unrolled with remainder by 4  
         LOOP END

         LOOP BEGIN at FMM_expint.c(648,8)
         <Remainder>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at FMM_expint.c(657,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at FMM_expint.c(703,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at FMM_expint.c(704,9)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at FMM_expint.c(707,4)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at FMM_expint.c(708,6)
                  remark #15300: LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at FMM_expint.c(708,6)
               <Remainder>
               LOOP END
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at FMM_expint.c(734,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between  line 739 and  line 25

         LOOP BEGIN at FMM_expint.c(736,29)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed ANTI dependence between  line 739 and  line 25

            LOOP BEGIN at expint.h(38,7) inlined into FMM_expint.c(739,67)
               remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
               remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            LOOP END

            LOOP BEGIN at expint.h(55,7) inlined into FMM_expint.c(739,67)
               remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
               remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
            LOOP END

            LOOP BEGIN at expint.h(13,3) inlined into FMM_expint.c(739,67)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed ANTI dependence between  line 15 and  line 15
               remark #25436: completely unrolled by 8  
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at FMM_expint.c(757,25)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.

         LOOP BEGIN at FMM_expint.c(768,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
            remark #15346: vector dependence: assumed OUTPUT dependence between  line 771 and  line 771

            LOOP BEGIN at FMM_expint.c(769,8)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
               remark #15346: vector dependence: assumed FLOW dependence between  line 771 and  line 771
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at FMM_expint.c(769,8)
            <Remainder>
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at FMM_expint.c(782,25)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed FLOW dependence between  line 783 and  line 783
         remark #25439: unrolled with remainder by 4  
      LOOP END

      LOOP BEGIN at FMM_expint.c(782,25)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

FMM_expint.c(624,13):remark #34026: call to memset implemented as a call to optimized library version
expint.h(25,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
===========================================================================

Begin optimization report for: compute_mpole_c(double *, int, double, double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (compute_mpole_c(double *, int, double, double)) [7] FMM_expint.c(1125,1)
  -> INLINE: (1131,21) _mm_mxMalloc(size_t, size_t)
  -> (1169,21) expint_log_euler(double)
  -> INLINE: (1203,3) _mm_mxFree(double *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at FMM_expint.c(1139,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 1141 and  line 1144
LOOP END

LOOP BEGIN at FMM_expint.c(1152,5)
   remark #25261: Invariant Condition eliminated(Proven True) at line 1153
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 1156 and  line 1156

   LOOP BEGIN at FMM_expint.c(1153,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between  line 1156 and  line 1156
   LOOP END
LOOP END

LOOP BEGIN at FMM_expint.c(1175,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between  line 1177 and  line 1184
LOOP END

LOOP BEGIN at FMM_expint.c(1195,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between  line 1198 and  line 1198

   LOOP BEGIN at FMM_expint.c(1196,7)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between  line 1198 and  line 1198
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: expint_log_euler(double)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (expint_log_euler(double)) [8] expint.h(100,1)
  -> INLINE: (101,12) expint(double)
    -> INLINE: (29,11) polyval(double *, double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at expint.h(13,3) inlined into expint.h(102,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between  line 15 and  line 15
   remark #25436: completely unrolled by 8  
LOOP END

LOOP BEGIN at expint.h(38,7) inlined into expint.h(102,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at expint.h(55,7) inlined into expint.h(102,12)
   remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

    Report from: Code generation optimizations [cg]

expint.h(25,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
===========================================================================

Begin optimization report for: Direct(double *, double *, double *, double *, double *, int *, int *, int, int, int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Direct(double *, double *, double *, double *, double *, int *, int *, int, int, int)) FMM_expint.c(908,58)

===========================================================================

Begin optimization report for: Assign(double *, double *, int, int, int *, int *, int *)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (Assign(double *, double *, int, int, int *, int *, int *)) FMM_expint.c(1063,73)

===========================================================================

Begin optimization report for: expint(double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (expint(double)) expint.h(21,1)

===========================================================================

Begin optimization report for: polyval(double *, double)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (polyval(double *, double)) expint.h(10,1)

===========================================================================

Begin optimization report for: isaligned(void *, unsigned int)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (isaligned(void *, unsigned int)) mex_FMM.h(158,1)

===========================================================================

Begin optimization report for: gettime(void)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (gettime(void)) mex_FMM.h(149,1)

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: FMM_expint.c
        main()(153)
        Mpoles(double *, double *, double *, double *, double *, int *, int *, int, int, int, int, int)(425)
        MpolesWorker(void *)(534)
        MpolesWorkerSum(void *)(802)
        DirectWorker(void *)(956)
        compute_mpole_c(double *, int, double, double)(1125)

  File: expint.h
        expint_log_euler(double)(100)

  File: mex_FMM.h
        Intlist(int *, int *)(112)


  0 out of 8 routine(s) used training profile data for PGO feedback
  0 out of 8 routine(s) were unable to use training profile data for PGO feedback
  0 out of 8 routine(s) were unable to find training profile data for PGO feedback
  8 out of 8 routine(s) used a static estimate profile for PGO feedback



